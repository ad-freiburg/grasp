[
  {
    "id": "example0",
    "question": "1: Select all taxa from theUniProt taxonomy",
    "sparql": "PREFIX up: <http://purl.uniprot.org/core/>\nSELECT ?taxon\nFROM <http://sparql.uniprot.org/taxonomy>\nWHERE\n{\n    ?taxon a up:Taxon .\n}"
  },
  {
    "id": "example0",
    "question": "1: Select all taxa from theUniProt taxonomy",
    "sparql": "PREFIX up: <http://purl.uniprot.org/core/>\nSELECT ?taxon\nFROM <http://sparql.uniprot.org/taxonomy>\nWHERE\n{\n    ?taxon a up:Taxon .\n}"
  },
  {
    "id": "example0",
    "question": "1: Select all taxa from theUniProt taxonomy",
    "sparql": "PREFIX up: <http://purl.uniprot.org/core/>\nSELECT ?taxon\nFROM <http://sparql.uniprot.org/taxonomy>\nWHERE\n{\n    ?taxon a up:Taxon .\n}"
  },
  {
    "id": "example1",
    "question": "2: Select all bacterial taxa and their scientific name from theUniProt taxonomy",
    "sparql": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT ?taxon ?name\nWHERE\n{\n    ?taxon a up:Taxon .\n    ?taxon up:scientificName ?name .\n    # Taxon subclasses are materialized, do not use rdfs:subClassOf+\n    ?taxon rdfs:subClassOf taxon:2 .\n}"
  },
  {
    "id": "example2",
    "question": "3: Select all UniProtKB entries, and their organism and amino acid sequences (including isoforms), forE. coli K12and all its strains",
    "sparql": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT ?protein ?organism ?isoform ?sequence\nWHERE\n{\n    ?protein a up:Protein .\n    ?protein up:organism ?organism .\n    # Taxon subclasses are materialized, do not use rdfs:subClassOf+\n    ?organism rdfs:subClassOf taxon:83333 .\n    ?protein up:sequence ?isoform .\n    ?isoform rdf:value ?sequence .\n}"
  },
  {
    "id": "example3",
    "question": "4: Select the UniProtKB entry with themnemonic'A4_HUMAN'",
    "sparql": "PREFIX up: <http://purl.uniprot.org/core/>\nSELECT ?protein\nWHERE\n{\n    ?protein a up:Protein .\n    ?protein up:mnemonic 'A4_HUMAN'\n}"
  },
  {
    "id": "example4",
    "question": "5: Select a mapping of UniProtKB to PDB entries using the UniProtKB cross-references to thePDBdatabase",
    "sparql": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT ?protein ?db\nWHERE\n{\n    ?protein a up:Protein .\n    ?protein rdfs:seeAlso ?db .\n    ?db up:database <http://purl.uniprot.org/database/PDB>\n}"
  },
  {
    "id": "example5",
    "question": "6: Select all cross-references to external databases of the category'3D structure databases'of UniProtKB entries that are classified with the keyword'Acetoin biosynthesis (KW-0005)'",
    "sparql": "PREFIX keywords: <http://purl.uniprot.org/keywords/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT DISTINCT ?link\nWHERE\n{\n    ?protein a up:Protein .\n    ?protein up:classifiedWith keywords:5 .\n    ?protein rdfs:seeAlso ?link .\n    ?link up:database ?db .\n    ?db up:category '3D structure databases'\n}"
  },
  {
    "id": "example6",
    "question": "7: Select reviewed UniProtKB entries (Swiss-Prot), and their recommended protein name, that have a preferred gene name that contains the text 'DNA'",
    "sparql": "PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT ?protein ?name\nWHERE\n{\n        ?protein a up:Protein .\n        ?protein up:reviewed true .\n        ?protein up:recommendedName ?recommended .\n        ?recommended up:fullName ?name .\n        ?protein up:encodedBy ?gene .\n        ?gene skos:prefLabel ?text .\n        FILTER CONTAINS(?text, 'DNA')\n}"
  },
  {
    "id": "example7",
    "question": "8: Select the preferred gene name and disease annotation of all human UniProtKB entries that are known to be involved in a disease",
    "sparql": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT ?name ?text\nWHERE\n{\n        ?protein a up:Protein . \n        ?protein up:organism taxon:9606 .\n        ?protein up:encodedBy ?gene . \n        ?gene skos:prefLabel ?name .\n        ?protein up:annotation ?annotation .\n        ?annotation a up:Disease_Annotation .\n        ?annotation rdfs:comment ?text\n}"
  },
  {
    "id": "example8",
    "question": "9: Select all human UniProtKB entries with a sequence variant that leads to a 'loss of function'",
    "sparql": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT ?protein ?text\nWHERE\n{ \n        ?protein a up:Protein .\n        ?protein up:organism taxon:9606 . \n        ?protein up:annotation ?annotation .\n        ?annotation a up:Natural_Variant_Annotation . \n        ?annotation rdfs:comment ?text .\n        FILTER (CONTAINS(?text, 'loss of function'))\n}"
  },
  {
    "id": "example9",
    "question": "10: Select all human UniProtKB entries with a sequence variant that leads to a tyrosine to phenylalanine substitution",
    "sparql": "PREFIX faldo: <http://biohackathon.org/resource/faldo#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT ?protein ?annotation ?begin ?text\nWHERE\n{\n        ?protein a up:Protein ;\n            up:organism taxon:9606 ; \n            up:annotation ?annotation .\n        ?annotation a up:Natural_Variant_Annotation ;\n            rdfs:comment ?text ;\n            up:substitution ?substitution ;\n            up:range/faldo:begin\n                [ faldo:position ?begin ;\n                  faldo:reference ?sequence ] .\n        ?sequence rdf:value ?value .\n        BIND (substr(?value, ?begin, 1) as ?original) .\n        FILTER(?original = 'Y' && ?substitution = 'F') .\n}"
  },
  {
    "id": "example10",
    "question": "11: Select all UniProtKB entries with annotated transmembrane regions and the regions' begin and end coordinates on the canonical sequence",
    "sparql": "PREFIX faldo: <http://biohackathon.org/resource/faldo#>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT ?protein ?begin ?end\nWHERE \n{\n\t?protein a up:Protein .\n\t?protein up:annotation ?annotation .\n\t?annotation a up:Transmembrane_Annotation .\n\t?annotation up:range ?range .\n\t?range faldo:begin/faldo:position ?begin .\n\t?range faldo:end/faldo:position ?end\n}"
  },
  {
    "id": "example11",
    "question": "12: Select all UniProtKB entries that were integrated on the 30th of November 2010",
    "sparql": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nSELECT ?protein\nWHERE\n{\n\t?protein a up:Protein . \n\t?protein up:created '2010-11-30'^^xsd:date\n}"
  },
  {
    "id": "example12",
    "question": "13: Was any UniProtKB entry integrated on the 9th of January 2013",
    "sparql": "PREFIX up: <http://purl.uniprot.org/core/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nASK\nWHERE\n{\n\t?protein a up:Protein .\n\t?protein up:created '2013-01-09'^^xsd:date\n}"
  },
  {
    "id": "example13",
    "question": "14: Construct new triples of the type 'HumanProtein' from all human UniProtKB entries",
    "sparql": "PREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nCONSTRUCT\n{\n\t?protein a up:HumanProtein .\n}\nWHERE\n{\n\t?protein a up:Protein .\n\t?protein up:organism taxon:9606\n}"
  },
  {
    "id": "example14",
    "question": "17: Select the average number of cross-references to thePDBdatabase of UniProtKB entries that have at least one cross-reference to the PDB database",
    "sparql": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT (AVG(?linksToPdbPerEntry) AS ?avgLinksToPdbPerEntry)\nWHERE\n{\n\tSELECT ?protein (COUNT(DISTINCT ?db) AS ?linksToPdbPerEntry)\n\tWHERE\n\t{\n\t\t?protein a up:Protein .\n\t\t?protein rdfs:seeAlso ?db .\n\t\t?db up:database <http://purl.uniprot.org/database/PDB> .\n\t}\n\tGROUP BY ?protein ORDER BY DESC(?linksToPdbPerEntry)\n}"
  },
  {
    "id": "example15",
    "question": "18: Select the number of UniProtKB entries for each of the EC (Enzyme Commission) top level categories",
    "sparql": "PREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT ?ecClass (COUNT(?protein) as ?size)\nWHERE\n{\n    VALUES (?ecClass) {(ec:1.-.-.-) (ec:2.-.-.-) (ec:3.-.-.-) (ec:4.-.-.-) (ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-)} .\n    ?protein ( up:enzyme | up:domain/up:enzyme | up:component/up:enzyme ) ?enzyme .\n    # Enzyme subclasses are materialized, do not use rdfs:subClassOf+\n    ?enzyme rdfs:subClassOf ?ecClass .\n}\nGROUP BY ?ecClass ORDER BY ?ecClass"
  },
  {
    "id": "example16",
    "question": "19: Find all natural variant annotations if associated via an evidence tag to an article with a PubMed identifier",
    "sparql": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT \n    ?accession\n    ?annotation_acc \n    ?pubmed\nWHERE\n{\n        ?protein a up:Protein ;\n            up:annotation ?annotation .\n        ?annotation a up:Natural_Variant_Annotation .\n        ?linkToEvidence rdf:object ?annotation ;\n                        up:attribution ?attribution .\n        ?attribution up:source ?source .\n        ?source a up:Journal_Citation .\n  BIND(SUBSTR(STR(?protein),33) AS ?accession)\n  BIND(IF(CONTAINS(STR(?annotation), \"#SIP\"), SUBSTR(STR(?annotation),33), SUBSTR(STR(?annotation),36))AS?annotation_acc)\n  BIND(SUBSTR(STR(?source),35) AS ?pubmed)\n}"
  },
  {
    "id": "example17",
    "question": "20: Find how often an article in PubMed was used in an evidence tag in a human protein (ordered by most used to least)",
    "sparql": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT \n    ?source \n    (COUNT(?attribution) AS ?attribitions)\nWHERE\n{\n        ?protein a up:Protein ;\n            up:organism taxon:9606 ;\n            up:annotation ?annotation .\n        ?linkToEvidence rdf:object ?annotation ;\n                        up:attribution ?attribution .\n        ?attribution up:source ?source .\n        ?source a up:Journal_Citation .\n} GROUP BY ?source ORDER BY DESC(COUNT(?attribution))"
  },
  {
    "id": "example18",
    "question": "21: Find where disease related proteins are known to be located in the cell",
    "sparql": "PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT \n    ?protein \n    ?disease \n    ?location_inside_cell \n    ?cellcmpt\nWHERE\n{\n    ?protein up:annotation ?diseaseAnnotation , ?subcellAnnotation .\n    ?diseaseAnnotation up:disease/skos:prefLabel ?disease .\n    ?subcellAnnotation up:locatedIn/up:cellularComponent ?cellcmpt .\n    ?cellcmpt skos:prefLabel ?location_inside_cell .\n}"
  },
  {
    "id": "example19",
    "question": "22: For two accession numbers (ACs) find the GO term labels and group them into GO process,function and component",
    "sparql": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX GO:<http://purl.obolibrary.org/obo/GO_>\nSELECT \n    (CONCAT(SUBSTR(STR(?protein), 33)) AS ?uniprot)\n    (GROUP_CONCAT(?celtype; separator=\";\") AS ?celtypes)\n    (GROUP_CONCAT(?biotype; separator=\";\") AS ?biotypes)\n    (GROUP_CONCAT(?moltype; separator=\";\") AS ?moltypes)\nWHERE\n{\n    VALUES (?ac) {(\"Q6GZX4\") (\"Q96375\")}\n    BIND (IRI(CONCAT(\"http://purl.uniprot.org/uniprot/\",?ac)) AS ?protein)\n    ?protein a up:Protein .\n    ?protein up:classifiedWith ?goTerm .\n    #Determine if the type is biological_process\n    OPTIONAL {\n        ?goTerm rdfs:subClassOf GO:0008150 .\n        ?goTerm rdfs:label ?biotype .\n    }\n    #Determine if the type is cellular_component\n    OPTIONAL {\n        ?goTerm rdfs:subClassOf GO:0005575 .\n        ?goTerm rdfs:label ?celtype .\n    }\n    #Determine if the type is molecular_function\n    OPTIONAL {\n        ?goTerm rdfs:subClassOf GO:0003674 .\n        ?goTerm rdfs:label ?moltype .\n    }\n    #Filter out the uniprot keywords\n    FILTER(bound(?biotype) || bound(?celtype) || bound(?moltype))\n} GROUP BY ?protein"
  },
  {
    "id": "example20",
    "question": "23: Number of reviewed entries (UniProtKB/Swiss-Prot) that are related tokinase activity",
    "sparql": "PREFIX GO: <http://purl.obolibrary.org/obo/GO_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT\n    (COUNT(DISTINCT(?protein)) AS ?pc)\nWHERE\n{   \n    ?protein rdf:type up:Protein ;\n        up:reviewed true  ;\n        up:organism taxon:9606 ;\n        up:classifiedWith|(up:classifiedWith/rdfs:subClassOf) GO:0016301 .\n}"
  },
  {
    "id": "example21",
    "question": "24: Find the release number of the UniProt data that is currently being queried",
    "sparql": "SELECT ?version\nFROM <https://sparql.uniprot.org/.well-known/void>\nWHERE\n{\n    [] <http://purl.org/pav/version> ?version\n}"
  },
  {
    "id": "example22",
    "question": "25: Find UniProtKB entry which has a protein name 'HLA class I histocompatibility antigen, B-73 alpha chain'",
    "sparql": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT ?protein ?anyKindOfName\nWHERE\n{\n\t\t?protein a up:Protein .\n\t\t?protein (up:recommendedName|up:alternativeName) ?structuredName .\n\t\t?structuredName ?anyKindOfName  \"HLA class I histocompatibility antigen, B alpha chain\" .\n\t\t?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}"
  },
  {
    "id": "example23",
    "question": "26: Find UniProtKB proteins which are cleaved and contain a domain or component named 'HLA class I histocompatibility antigen, B-73 alpha chain'",
    "sparql": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT ?protein ?anyKindOfName\nWHERE\n{\n\t\t?protein a up:Protein .\n\t\t?protein (up:recommendedName|up:alternativeName)|((up:domain|up:component)/(up:recommendedName|up:alternativeName)) ?structuredName .\n\t\t?structuredName ?anyKindOfName  \"HLA class I histocompatibility antigen, B-73 alpha chain\" .\n\t\t?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}"
  },
  {
    "id": "example24",
    "question": "26: Find UniProtKB entry, or an UniProtKB entries domain or component which has a name 'HLA class I histocompatibility antigen, B-73 alpha chain'",
    "sparql": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT ?protein ?anyKindOfName\nWHERE\n{\n\t\t?protein a up:Protein .\n\t\t?protein (up:recommendedName|up:alternativeName)|((up:domain|up:component)/(up:recommendedName|up:alternativeName)) ?structuredName .\n\t\t?structuredName ?anyKindOfName  \"HLA class I histocompatibility antigen, B-73 alpha chain\" .\n\t\t?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}"
  },
  {
    "id": "example25",
    "question": "27: Retrieve all protein names, including peptide names, associated with UniProtKB entry P05067.",
    "sparql": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nSELECT\n  ?protein\n  ?anyKindOfName \n  ?names \n  ?partType\nWHERE\n{\n  BIND(<http://purl.uniprot.org/uniprot/P05067> AS ?protein)\n  ?protein a up:Protein .\n  {\n    ?protein (up:recommendedName|up:alternativeName) ?structuredName .\n  }\n    UNION\n  {\n    VALUES(?partType){(up:domain) (up:component)}\n    ?protein ?partType ?part .\n    ?part (up:recommendedName|up:alternativeName) ?structuredName .\n  }\n  ?structuredName ?anyKindOfName  ?names .\n  ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}"
  }
]