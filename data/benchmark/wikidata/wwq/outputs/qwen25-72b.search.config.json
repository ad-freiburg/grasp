{
  "config": {
    "model": "hosted_vllm/Qwen/Qwen2.5-72B-Instruct",
    "model_endpoint": "http://localhost:8335/v1",
    "api_key": null,
    "fn_set": "search",
    "knowledge_graphs": [
      {
        "name": "wikidata",
        "endpoint": "https://qlever.cs.uni-freiburg.de/api/wikidata-sebastian",
        "entities_dir": null,
        "properties_dir": null,
        "entities_type": null,
        "properties_type": null,
        "prefix_file": null,
        "example_index": null
      }
    ],
    "search_top_k": 10,
    "result_max_rows": 10,
    "result_max_columns": 10,
    "list_k": 10,
    "know_before_use": false,
    "temperature": 0.2,
    "top_p": 0.9,
    "max_completion_tokens": 4096,
    "completion_timeout": 120.0,
    "num_examples": 3,
    "force_examples": false,
    "random_examples": false,
    "feedback": false
  },
  "functions": [
    {
      "name": "answer",
      "description": "Provide your final SPARQL query and answer to the user question based on the query results. This function will stop the generation process.",
      "parameters": {
        "type": "object",
        "properties": {
          "kg": {
            "type": "string",
            "enum": [
              "wikidata"
            ],
            "description": "The knowledge graph on which the final SPARQL query needs to be executed"
          },
          "sparql": {
            "type": "string",
            "description": "The final SPARQL query"
          },
          "answer": {
            "type": "string",
            "description": "The answer to the question based on the SPARQL query results"
          }
        },
        "required": [
          "kg",
          "sparql",
          "answer"
        ],
        "additionalProperties": false
      },
      "strict": true
    },
    {
      "name": "cancel",
      "description": "If you are unable to find a SPARQL query that answers the question well, you can call this function instead of the answer function. This function will stop the generation process.",
      "parameters": {
        "type": "object",
        "properties": {
          "explanation": {
            "type": "string",
            "description": "A detailed explanation of why you could not find a satisfactory SPARQL query"
          },
          "best_attempt": {
            "type": "object",
            "description": "Your best attempt at a SPARQL query so far, can be omitted if there is none",
            "properties": {
              "sparql": {
                "type": "string",
                "description": "The best SPARQL query so far"
              },
              "kg": {
                "type": "string",
                "enum": [
                  "wikidata"
                ],
                "description": "The knowledge graph on which the SPARQL query needs to be executed"
              }
            },
            "required": [
              "sparql",
              "kg"
            ],
            "additionalProperties": false
          }
        },
        "required": [
          "explanation"
        ],
        "additionalProperties": false
      }
    },
    {
      "name": "execute",
      "description": "Execute a SPARQL query and retrieve its results as a table if successful, and an error message otherwise.\n\nFor example, to execute a SPARQL query over Wikidata to find the jobs of Albert Einstein, do the following:\nexecute(kg=\"wikidata\", sparql=\"SELECT ?job WHERE { wd:Q937 wdt:P106 ?job }\")",
      "parameters": {
        "type": "object",
        "properties": {
          "kg": {
            "type": "string",
            "enum": [
              "wikidata"
            ],
            "description": "The knowledge graph to query"
          },
          "sparql": {
            "type": "string",
            "description": "The SPARQL query to execute"
          }
        },
        "required": [
          "kg",
          "sparql"
        ],
        "additionalProperties": false
      },
      "strict": true
    },
    {
      "name": "list",
      "description": "List triples from the knowledge graph satisfying the given subject, property, and object constraints. At most two of subject, property, and object should be constrained at once. \n\nFor example, to find triples with Albert Einstein as the subject in Wikidata, do the following:\nlist(kg=\"wikidata\", subject=\"wd:Q937\")\n\nOr to find examples of how the property \"place of birth\" is used in Wikidata, do the following:\nlist(kg=\"wikidata\", property=\"wdt:P19\")",
      "parameters": {
        "type": "object",
        "properties": {
          "kg": {
            "type": "string",
            "enum": [
              "wikidata"
            ],
            "description": "The knowledge graph to use"
          },
          "subject": {
            "type": "string",
            "description": "Optional IRI for constraining the subject"
          },
          "property": {
            "type": "string",
            "description": "Optional IRI for constraining the property"
          },
          "object": {
            "type": "string",
            "description": "Optional IRI or literal for constraining the object"
          }
        },
        "required": [
          "kg"
        ],
        "additionalProperties": false
      }
    },
    {
      "name": "search_entity",
      "description": "Search for entities in the knowledge graph with a search query. This function uses a prefix keyword index internally.\n\nFor example, to search for the entity Albert Einstein in Wikidata, do the following:\nsearch_entity(kg=\"wikidata\", query=\"albert einstein\")",
      "parameters": {
        "type": "object",
        "properties": {
          "kg": {
            "type": "string",
            "enum": [
              "wikidata"
            ],
            "description": "The knowledge graph to search"
          },
          "query": {
            "type": "string",
            "description": "The search query"
          }
        },
        "required": [
          "kg",
          "query"
        ],
        "additionalProperties": false
      },
      "strict": true
    },
    {
      "name": "search_property",
      "description": "Search for properties in the knowledge graph with a search query. This function uses an embedding-based similarity index internally.\n\nFor example, to search for properties related to birth in Wikidata, do the following:\nsearch_property(kg=\"wikidata\", query=\"birth\")",
      "parameters": {
        "type": "object",
        "properties": {
          "kg": {
            "type": "string",
            "enum": [
              "wikidata"
            ],
            "description": "The knowledge graph to search"
          },
          "query": {
            "type": "string",
            "description": "The search query"
          }
        },
        "required": [
          "kg",
          "query"
        ],
        "additionalProperties": false
      },
      "strict": true
    }
  ],
  "system_message": {
    "role": "system",
    "content": "You are a question answering assistant. Your job is to generate a SPARQL query to answer a given user question.\n\nYou have access to the following knowledge graphs:\nwikidata at https://qlever.cs.uni-freiburg.de/api/wikidata-sebastian\n\nYou can use the following SPARQL prefixes implicitly in all functions:\ncc: <http://creativecommons.org/ns#\ndata: <https://www.wikidata.org/wiki/Special:EntityData/\ndct: <http://purl.org/dc/terms/\ngeo: <http://www.opengis.net/ont/geosparql#\ngeof: <http://www.opengis.net/def/function/geosparql/\nimdb: <https://www.imdb.com/\nmath: <http://www.w3.org/2005/xpath-functions/math#\nontolex: <http://www.w3.org/ns/lemon/ontolex#\nowl: <http://www.w3.org/2002/07/owl#\np: <http://www.wikidata.org/prop/\npq: <http://www.wikidata.org/prop/qualifier/\npqn: <http://www.wikidata.org/prop/qualifier/value-normalized/\npqv: <http://www.wikidata.org/prop/qualifier/value/\npr: <http://www.wikidata.org/prop/reference/\nprn: <http://www.wikidata.org/prop/reference/value-normalized/\nprov: <http://www.w3.org/ns/prov#\nprv: <http://www.wikidata.org/prop/reference/value/\nps: <http://www.wikidata.org/prop/statement/\npsn: <http://www.wikidata.org/prop/statement/value-normalized/\npsv: <http://www.wikidata.org/prop/statement/value/\nqfn: <http://qlever.cs.uni-freiburg.de/function#\nql: <http://qlever.cs.uni-freiburg.de/builtin-functions/\nrdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#\nrdfs: <http://www.w3.org/2000/01/rdf-schema#\nref: <http://www.wikidata.org/reference/\ns: <http://www.wikidata.org/entity/statement/\nschema: <http://schema.org/\nskos: <http://www.w3.org/2004/02/skos/core#\nv: <http://www.wikidata.org/value/\nwd: <http://www.wikidata.org/entity/\nwdno: <http://www.wikidata.org/prop/novalue/\nwdt: <http://www.wikidata.org/prop/direct/\nwdtn: <http://www.wikidata.org/prop/direct-normalized/\nwikibase: <http://wikiba.se/ontology#\nxsd: <http://www.w3.org/2001/XMLSchema#\nfoaf: <http://xmlns.com/foaf/0.1/\ndc: <http://purl.org/dc/elements/1.1/\ngn: <http://www.geonames.org/ontology#\nbd: <http://www.bigdata.com/rdf#\nhint: <http://www.bigdata.com/queryHints#\nqb: <http://purl.org/linked-data/cube#\nvoid: <http://rdfs.org/ns/void#\n\nYou should follow a step-by-step approach to generate the SPARQL query:\n1. Determine possible entities and properties implied by the user question.\n2. Use the functions to search for entities and properties in the knowledge graphs. Where applicable, constrain the searches with already identified entities and properties.\n3. Gradually build up the SPARQL query using the identified entities and properties. Start with simple queries and add more complexity as needed. Use the execute function to get feedback on intermediate queries. You can go back and forth between knowledge graph searches and SPARQL query executions to refine the query.\n4. Use the answer or cancel function to finalize your answer and stop the generation process.\n\nAdditional rules:\n1. Explain your thought process before and after each step and function call.\n2. Do not assume or make up any entities or properties without verifying them with the knowledge graphs and functions.\n3. The SPARQL query should always return the actual identifiers / IRIs of the items in its result. It additionally may return labels or other human-readable information, but they are optional and should be put within optional clauses unless explicitly requested by the user.\n4. Do not stop early if there are still obvious improvements to be made to the SPARQL query. For example, keep refining your SPARQL query if its result contains irrelevant items or is missing items you expected.\n5. Do not perform additional computation (e.g. filtering, sorting, calculations) on the result of the SPARQL query to determine the answer. All computation should be done solely within SPARQL.\n6. For questions with a \"True\" or \"False\" answer the SPARQL query should be an ASK query.\n7. Do not use 'SERVICE wikibase:label { bd:serviceParam wikibase:language ...' in SPARQL queries. It is not SPARQL standard and unsupported by the used QLever SPARQL endpoints. Use rdfs:label or similar properties to get labels instead."
  }
}